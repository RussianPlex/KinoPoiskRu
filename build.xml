<?xml version="1.0"?>
<project name="KinoPoiskRu" default="help" basedir=".">

  <!-- Take properties from user.build.properties file if it exists. -->
  <property file="user.build.properties" />
  <property file="build.properties" />
  <available file=".git" type="dir" property="git.present"/>

  <filterset id="commonFilterSet" begintoken="@" endtoken="@">
    <filter token="PROJECT.NAME" value="${project.name}" />

    <filter token="PLUGIN.LOGKEY" value="0" /> <!-- 0 - Off; 1 - On; -->
    <filter token="PLUGIN.LOGLEVEL" value="Critical" /> <!-- Critical, Error, Warning, Info, Debug. -->
    <filter token="DEBUG.SCORING" value="False" />
    <filter token="DEBUG.MAIN" value="False" />
  </filterset>

  <target name="help"
          description="Prints useful information about the project builds.">
    <echo>
      For a full list of project targets run 'ant -p'.
    </echo>
  </target>


  <target name="install" depends="distro"
          description="Installs plugin into a local PMS directory.">
    <available file="${plex.plugins.dir}" property="isPlexDirectoryExists" />
    <fail unless="isPlexDirectoryExists" message="Plex plugins directory ${plex.plugins.dir} does not exist!" />
    <delete dir="${plex.plugins.dir}/${plugin.dir.name}" failonerror="false" />
    <copy todir="${plex.plugins.dir}/${plugin.dir.name}">
      <fileset dir="${build.assembly.dir}/${plugin.dir.name}" />
    </copy>
  </target>

  <target name="distro" depends="build"
          description="Creates archive release files of the plugin.">
    <echo message="Creating plugin (archive) distribution files..." />
    <property name="arg.base.filename" value="${project.name}-${kinopoisk.plugin.version}" />
    <property name="plugin.zip.filepath" value="${build.dist.dir}/${arg.base.filename}.zip" />
    <zip destfile="${plugin.zip.filepath}" update="true">
      <zipfileset dir="${build.assembly.plugin.dir}" prefix="${plugin.dir.name}" />
    </zip>
    <property name="plugin.gz.filepath" value="${build.dist.dir}/${arg.base.filename}.tar.gz" />
    <tar destfile="${plugin.gz.filepath}" compression="gzip">
      <zipfileset dir="${build.assembly.plugin.dir}" prefix="${plugin.dir.name}" />
    </tar>
    <echo message="zip    -> ${plugin.zip.filepath}." />
    <echo message="tar.gz -> ${plugin.gz.filepath}." />
  </target>

  <target name="test"
          description="Runs plugin unit tests. Add '-DexcludeRemote=' to command line to exclude remote tests. Add -DlogLevel=2 to set log level (0-5)."
          depends="distro,build-test">
    <property name="plugin.code.dir" value="${build.assembly.plugin.dir}/${src.path}" />
    <copy todir="${kinopoisk.build.test.dir}" filtering="true" >
      <fileset dir="${plugin.code.dir}">
        <exclude name="__init__.py" />
      </fileset>
    </copy>
    <exec dir="${kinopoisk.build.test.dir}" executable="python" failonerror="true">
      <arg line="main.py --log=${logLevel} ${isExcludeRemote}" />
    </exec>
  </target>

  <target name="clean"
          description="Cleans up the build directory.">
    <echo message="Cleaning up local build directory ${build.dir}." />
    <delete dir="${build.dir}" failonerror="false" />
  </target>

  <target name="build-test" description="Builds test files." depends="build">
    <copy todir="${build.test.dir}" filtering="true"
          encoding="UTF-8" outputencoding="UTF-8" overwrite="true">
      <filterset refid="commonFilterSet" />
      <filterset>
        <filter token="REPOSITORY.REVISION" value="${revision.version.number}" />
      </filterset>
      <fileset dir="${test.scr.dir}">
        <exclude name="**/*.html" />
      </fileset>
    </copy>
    <copy todir="${build.test.dir}" filtering="false"
          encoding="cp1251" outputencoding="cp1251" overwrite="true">
      <fileset dir="${test.scr.dir}">
        <include name="**/*.html" />
      </fileset>
    </copy>
  </target>

  <target name="build" depends="-init"
          description="Builds project files - copies files to the plugin assembly directory.">
    <copy todir="${build.assembly.plugin.dir}" filtering="true"
          encoding="UTF-8" outputencoding="UTF-8" overwrite="true">
      <filterset refid="commonFilterSet" />
      <filterset>
        <filter token="REPOSITORY.REVISION" value="${revision.version.number}" />
        <filter token="PLUGIN.REVISION" value="${kinopoisk.plugin.version}" />
      </filterset>
      <fileset dir="${plugin.dir.name}">
        <include name="**/*.py" />
        <include name="**/*.plist" />
      </fileset>
    </copy>
    <copy todir="${build.assembly.plugin.dir}" filtering="false">
      <fileset dir="${plugin.dir.name}">
        <exclude name="**/*.py" />
        <exclude name="**/*.plist" />
      </fileset>
    </copy>
  </target>

  <target name="-init" depends="-get-git-revision"
          description="Initializes necessary properties and creates directories for the project build.">
    <condition property="isExcludeRemote" value="--exclude-remote" else="">
      <isset property="excludeRemote" />
    </condition>
    <condition property="logLevel" else="0">
      <isset property="logLevel" />
    </condition>

    <tstamp>
      <format property="current.date" pattern="MM-dd-yyyy" />
      <format property="current.time" pattern="hh:mm" />
    </tstamp>
    <mkdir dir="${build.dir}" />
    <mkdir dir="${build.dist.dir}" />
    <mkdir dir="${build.assembly.dir}" />
    <mkdir dir="${build.assembly.plugin.dir}" />
  </target>

  <target name="-get-git-revision" if="git.present"
          description="Stores git revision number in the revision.version.number property.">
    <exec executable="git" outputproperty="git.revision" failifexecutionfails="false" errorproperty="">
      <arg value="describe"/>
      <arg value="--tags"/>
      <arg value="--always"/>
      <arg value="HEAD"/>
    </exec>
    <condition property="revision.version.number" value="${git.revision}" else="unknown">
      <and>
        <isset property="git.revision"/>
        <length string="${git.revision}" trim="yes" length="0" when="greater"/>
      </and>
    </condition>
  </target>

</project>
